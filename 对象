对象定义
对象是JS中的一种复合数据类型，它可以把多个数据集中在一个变量中，并且给其中的每个数据起名字
或者说，对象是一个属性集合，每个属性都有自己的名字和值

创建对象：
方法1 var o=new Object();

方法2 var circle={
radius：1，
x:1,
y:1
},
draw:function (){
console.log('draw');
}
};        //对象可以包括多个属性键值对，也可以包括方法（draw）


方法3 工厂函数，factory
function createCircle(radius){
  return {
   radius,
   draw: function(){
     console.log('draw');
     }
    };
   }
   const circle = createCircle(1);
   circle.draw();
   
   
方法4 构造函数,constructor
function Circle(radius){
  this.radius = radius;
  this.draw = function(){
  console.log(‘draw’）；
  }
 }
 const another = new Circle(1);
  
  
  

运算符： .
举例
var book=new Object();

book.title="html秘籍"；               //跟数组类似，直接赋值，就创建了title属性
book.translator="李晓峰"；
book.chapter1=new Object();
book.chapter1.title="html简介"

删除对象属性

delete book.chapter1;
book.chapter1=null;

遍历所有属性

for(var x in o)
举例
var o=new Object();
o.name="John Mike";
o.age=30;
o.salary=300;
for(var x in o){
 alert(o[x]);
 }
 引用数据类型：1，对象数据类型：普通对象{}，数组对象[]，正则对象/^[+-]?([1-9])/，Math数学函数对象，日期对象
             2， 函数数据类型
             
             
             object对象数据类型-普通对象
             {[key]:[value],...} 任何一个对象都是由零到多组键值对组成的，并且属性名不能重复
             获取属性名对应的属性值，对象.属性名
             let person={
             name:'123',
             age:40,
             weight:'80kg',
             height:'181cm',
             1：100
             };
             consolo.log(person.name);
             consolo.log(person['age']);             //属性名都是字符串，不过是默认的，所以没有加引号
             如果当前属性名不存在，默认的属性值是undefined
             consolo.log(person.sex);             // undefined
             如果当前属性名是数字，则不能使用点的方式获得属性值
             consolo.log(person.1)   //语法错误
 
 
 数组是特殊的对象数据类型
 1,中括号内设置的是属性值，属性名是默认生成的数字，从零开始递增；而且这个数字代表每一项的位置，
 我们将其成为索引。
 2，默认一个属性名length，存储数组的长度
 let ary=[12,'haha',true,13];
 consolo.log(ary.length); //4
 consolo.log(ary['length']); //4



 //1，电脑内存中分配出一块内存，用来执行代码，栈内存：stack；
   2，分配一个主线程用来自上而下执行JS代码；
  
 


let a=12;                           
let b=a;
b=13;
consolo.log(a);


   let a=12;
   1,创建变量a,放到当前栈内存变量存储区域中
   2，创建一个值12，把它存储到当前栈内存值区域中（简单基本类型值是这样存储的，复杂的引用类型值不是）
   3，=为赋值，其实赋值是让变量和值相互关联的过程，所以最后输出13
 



let n={name:'zhufeng'};
let m=n;
m.name='培训'；
consolo.log(n.name);       //培训

 复杂值得存储，又分为了三个步骤：
 1，在内存中分配出一块新内存，用来存储引用类型值，堆内存，heap，内存有一个16进制地址
 2，把对象中的键值对依次存储到堆内存中
 3，把堆内存地址和变量关联起来                              //因为复杂值得长度不确定，所以通过地址关联的方式，开辟堆内存；
                                                            而简单值长度确定，直接存储即可。

区别：基本类型按值操作，所以也叫值类型；
     引用类型操作的是堆内存的地址，按照引用地址操作。


构造方法/构造函数
 
 function Rect(w,h){
  this.width=w;
  this.height=h;
  this.area=function()
  {return this.width*this.height;
  };
  }
  var r=new Rect(5,10);
      alert(r.area());
      
