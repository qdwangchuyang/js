数组

索引数组 index array
创建方式：2种
1 用数组直接量var arr=[];                                 
2 用new：
var arr=new Array(); 


数组GET操作与SET操作
设置数组元素的值-set
var scores=[95,88,100];
scores[2]=98;        //将值为100的元素重新复制为98
scores[3]=75;        //在数组尾部添加一个新的元素

数组的length属性：记录了数组中理论上的元素个数length属性的值永远是最大下标+1


注：数组初始化从arr[0]开始，连续并且不重复
技巧： 1 获得数组最后一个元素：arr[arr.length-1]
       2 获得倒数第N个元素的位置：arr[arr.length-n]
       3 数组缩容：减小arr.length的数值，会删除结尾的多余元素
       4 遍历数组：依次访问数组中的每个元素，对每个元素执行相同的操作
       for(var i=0;i<arr.length;i++){
       arr[i]//当前正在遍历的元素
       }
       
特殊：三个不限制
1，不限制数组的元素个数：长度可变
2，不限制下标越界：
   获取元素值：不报错，返回undefined
   修改元素值：不报错，自动在指定位置创建新元素，并且自动修改length属性为最大下标+1
3，不限制元素的数据类型
-----------------------------------------------------------
2，关联数组：
2.1 定义：可以自定义下标名称的数组，一般用于希望每个元素都有专门的名称时
 创建： 1，创建空数组 
        2，向空数组中添加新元素，并自定义下标名称
 
举例： var bookInfo=[];
       bookInfo['bookName']='西游记'；
       bookInfo['price']=35.5
       
注：由于关联数组的length属性值无法获取其中元素的数量，所以遍历关联数组只能使用for..in循环
   
2.2遍历关联数组：for in循环
   for(var key in hash){
      key//只是元素的下标名
      hash[key]//当前元素值
     }
----------------------------------------------------------
索引数组与关联数组的对比

索引数组
1，以字符串输出
2，下标是数字
3，length属性有效
4，访问元素，都用数组名["下标"]
5，可用for循环遍历

关联数组
1，不能用字符串输出
2，下标是自定义的字符
3，length属性失效（=0）
4，不能用for循环遍历 -for in遍历

----------------------------------------
数组中的常用方法记忆维度：
1，方法的作用
2，方法的参数
3，方法的返回值
4，原有数组是否改变
-------------------------------------------
push
作用：向数组末尾追加新的内容
参数：追加的内容（可以是一个，或者多个）
返回值：新增后数组的长度
原有数组改变

var ary=[12,23,34];
ary.push(100);            //结果是新数组长度，4

pop
作用：删除数组最后一项
参数：无
返回：被删除的那一项内容
原有数组改变

var ary=[12,23,34];
ary.pop()                //结果是34，被删除的那一项

shift
作用：删除数组中的第一项
参数：无
返回：被删除的那一项内容
原有数组改变

var ary=[12,23,34];
ary.shift()              //结果是12，被删除的那一项

基于shift删除数组中的第一项，第一项被删除后，原有后面每一项的索引都要前移1位

unshift
作用：向数组开始位置追加新内容
参数：要增加的内容
返回：新增后数组的长度
原有数组改变

var ary=[12,23,34];
ary.unshift(100,true)        //结果是5，新数组的长度

splice
基于splice可以对数组进行多种操作：删除指定位置内容，向数组指定位置增加内容，还可以修改指定位置的信息

删除：ary.splice(n,m)
作用：从索引n开始删除m个内容
返回：将删除的部分以一个新数组返回
原有数组改变

var ary=[12,23,34，45,56,67,78,89,90];
ary.splice(2,3)      //结果是（34,45,56），将删除的数组返回
ary.splice(2)        //如果不指定m或者删除个数大于最大长度，直接删除到末尾，结果是[34，45,56,67,78,89,90]

新增：ary.splice(n,0,x,...)
从索引n开始删除零项，把x或者更多需要插入的内容存放到数组中索引N的前面

var ary=[12,23,34，45,56,67,78,89,90];
ary.splice(4,0,100,200,'珠峰'）   将100,200，‘珠峰’添加到56前面




数组API

1，数组转字符串

String（arr）:将arr中每个元素转为字符串，用逗号分隔
固定套路：对数组拍照，用于鉴别是否数组被修改过

arr.join("连接符")：将arr中每个元素转为字符串，用自定义的连接符分隔
var chars=["H","e","l","l","o"];
console.log(chars.join(""))； //Hello
固定套路：
1,将字符组成单词：chars.join("")->无缝拼接
扩展：判断数组是空数组：arr.join("")==""
2,将单词组成句子：word.join("")
3,将数组转化为页面元素的内容：
 "<开始标签>"+arr.join("</结束标签><开始标签>")+"</结束标签>"

拼接和选取

不直接修改原数组，而返回新数组！
拼接：concat()拼接两个或更多的数组，并返回结果
var newArr=arr1.concat(值1，值2，arr2,值3，....)
将值1，值2和arr2中每个元素，以及值3都拼接到arr1的元素之后，返回新数组
其中：arr2的元素会被先*打散*，再拼接
var arr1=[90,91,92];
var arr2=[80,81];
var arr3=[70,71,72,73];
var arr4=arr1.concat(50,60,arr2,arr3);

console.log(arr1);        // 90，91，92
console.log(arr4);        // 90，91，92，50，60，80，81，70，71，72，73

注：
拼接： concat()拼接两个或更多的数组，并返回结果
      var newArr=arr1.concat(值1，值2，arr2,值3，...)，将值1，值2和arr2中每个元素，
      以及值3都拼接到arr1的元素之后，返回新数组。其中：arr2的元素会被先*打散*，再拼接
      
选取:slice（）返回现有数组的一个子数组
     var subArr=arr.slice(starti,endi+1)
     选取arr中starti位置开始，到endi结束的所有元素组成新数组返回----------//原数组保持不变
     注：凡是两个参数都是下标的函数，都有一个特性：含头不含尾
     
     var arr1=[10,20,30,40,50];
     var arr2=arr1.slice(1,4);                     //从下标一开始，到下标四结束（不含），即20，30，40
     var arr3=arr1.slice(2);                       //从下标2开始到结束，即30，40，50
     var arr4=arr1.slice(-4,-2);                   //从下标倒数第四个开始，到下标倒数第二个结束（不含），即20，30
     console.log(arr1);                            //现有元素不变，即10，20，30，40，50

选取简写方式：
1，一直选取到结尾：可省略第二个参数
2，如果选取的元素离结尾近：可用倒数下标：
   arr.slice(arr.length-n,arr.length-m+1),可简写为arr.slice(-n,-m+1);
3,复制数组：
  arr.slice(0,arr.length);可简写成arr.slice()；
  
修改数组：

删除：splice直接修改原数组
arr.splice(starti,n);        //删除arr中starti位置开始的n个元素不考虑含头不含尾
其实:var deletes=arr.splice(starti,n);
返回值deletes保存了被删除的元素组成的临时数组
 
var arr1=[10,20,30,40,50];
var arr2=arr1.splice(2,1);   //从下标2开始删除，删除1个元素，即删除30
 
插入：arr.splice(starti,0,值1，值2，...)
     在arr中starti位置，插入值1，值2，...原stari位置的值及其之后的值被向后顺移

替换：其实就是删除旧的，插入新的
      arr.splice(starti,n,值1，值2,...)
      先删除arr中starti位置的n个值，再在starti位置插入新值。
      
      强调：删除的元素个数和插入的新元素个数不必一致。
 
 颠倒数组：
 颠倒：reverse()颠倒数组中元素的顺序
 arr.reverse();
 var arr1=[10,20,30,40,50];
 arr1.reverse();
 console.log(arr1);                  
 
 排序：将元素按从小到大的顺序重新排列
 排序API:
 arr.sort():默认将所有元素转为字符串再排列
 问题：只能排列字符串类型的元素
 解决：使用自定义比较器函数
===================================================== 
数组去重
目的是将重复项去掉
var ary=[1,2,3,2,3,4,3,4,5];
解决方法1：
1，依次拿出数组中的每一项（除了最后一项）
2，和当前拿出项后面的每一项依次比较
3，如果发现有重复的，将找到的重复项在原有数组中删除(splice)

=========================================================

   var ary=[1,2,3,2,2,3,4,3,4,5];
   基于对象的属性名不能重复，我们实现高性能的数组去重
   1，创建一个对象
   2，依次遍历数组中的每一项，把每一项存储的值，当做对象的属性名和属性值存储起来
   
   第一次循环1
   第二次循环
   第三次循环
   第四次循环2 我们在存储之前做一个判断，判断当前对象中是否已经存在这个属性名了；如果存在，说明之前有这一项存储的操作，进一步说明
   之前数组中出现过这个数值了（也就是重复了，此时我们把当前项在数组中移除即可）
   
   
   var obj={};
   for( var i=0;i<ary.length;i++){
        var item=ary[i];     //每一次循环从数组拿出来这一项
                             //存储之前需要判断：如果对象已经存在这个属性，说明当前item之前出现过，也就是当前项重复了，我们把当前项删除
        if(typeof obj[item]!=='undefined'{
        ary.splice(i,1);
        continue;
        }
        obj[item]=item










