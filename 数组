数组

索引数组 index array
创建方式：2种
1 用数组直接量var arr=[];                                 
2 用new：
var arr=new Array(); 


数组GET操作与SET操作
设置数组元素的值-set
var scores=[95,88,100];
scores[2]=98;        //将值为100的元素重新复制为98
scores[3]=75;        //在数组尾部添加一个新的元素

数组的length属性：记录了数组中理论上的元素个数length属性的值永远是最大下标+1


注：数组初始化从arr[0]开始，连续并且不重复
技巧： 1 获得数组最后一个元素：arr[arr.length-1]
       2 获得倒数第N个元素的位置：arr[arr.length-n]
       3 数组缩容：减小arr.length的数值，会删除结尾的多余元素
       4 遍历数组：依次访问数组中的每个元素，对每个元素执行相同的操作
       for(var i=0;i<arr.length;i++){
       arr[i]//当前正在遍历的元素
       }
       
特殊：三个不限制
1，不限制数组的元素个数：长度可变
2，不限制下标越界：
   获取元素值：不报错，返回undefined
   修改元素值：不报错，自动在指定位置创建新元素，并且自动修改length属性为最大下标+1
3，不限制元素的数据类型
-----------------------------------------------------------
2，关联数组：
2.1 定义：可以自定义下标名称的数组，一般用于希望每个元素都有专门的名称时
 创建： 1，创建空数组 
        2，向空数组中添加新元素，并自定义下标名称
 
举例： var bookInfo=[];
       bookInfo['bookName']='西游记'；
       bookInfo['price']=35.5
       
注：由于关联数组的length属性值无法获取其中元素的数量，所以遍历关联数组只能使用for..in循环
   
2.2遍历关联数组：for in循环
   for(var key in hash){
      key//只是元素的下标名
      hash[key]//当前元素值
     }
----------------------------------------------------------
索引数组与关联数组的对比

索引数组
1，以字符串输出
2，下标是数字
3，length属性有效
4，访问元素，都用数组名["下标"]
5，可用for循环遍历

关联数组
1，不能用字符串输出
2，下标是自定义的字符
3，length属性失效（=0）
4，不能用for循环遍历 -for in遍历

----------------------------------------
数组API

1，数组转字符串

String（arr）:将arr中每个元素转为字符串，用逗号分隔
固定套路：对数组拍照，用于鉴别是否数组被修改过

arr.join("连接符")：将arr中每个元素转为字符串，用自定义的连接符分隔
var chars=["H","e","l","l","o"];
console.log(chars.join(""))； //Hello
固定套路：
1,将字符组成单词：chars.join("")->无缝拼接
扩展：判断数组是空数组：arr.join("")==""
2,将单词组成句子：word.join("")
3,将数组转化为页面元素的内容：
 "<开始标签>"+arr.join("</结束标签><开始标签>")+"</结束标签>"

拼接和选取

不直接修改原数组，而返回新数组！
拼接：concat()拼接两个或更多的数组，并返回结果
var newArr=arr1.concat(值1，值2，arr2,值3，....)
将值1，值2和arr2中每个元素，以及值3都拼接到arr1的元素之后，返回新数组
其中：arr2的元素会被先*打散*，再拼接
var arr1=[90,91,92];
var arr2=[80,81];
var arr3=[70,71,72,73];
var arr4=arr1.concat(50,60,arr2,arr3);

console.log(arr1);        // 90，91，92
console.log(arr4);        // 90，91，92，50，60，80，81，70，71，72，73

注：
拼接： concat()拼接两个或更多的数组，并返回结果
      var newArr=arr1.concat(值1，值2，arr2,值3，...)，将值1，值2和arr2中每个元素，
      以及值3都拼接到arr1的元素之后，返回新数组。其中：arr2的元素会被先*打散*，再拼接
      
选取:slice（）返回现有数组的一个子数组
     var subArr=arr.slice(starti,endi+1)
     选取arr中starti位置开始，到endi结束的所有元素组成新数组返回----------//原数组保持不变
     注：凡是两个参数都是下标的函数，都有一个特性：含头不含尾
     
     var arr1=[10,20,30,40,50];
     var arr2=arr1.slice(1,4);                     //从下标一开始，到下标四结束（不含），即20，30，40
     var arr3=arr1.slice(2);                       //从下标2开始到结束，即30，40，50
     var arr4=arr1.slice(-4,-2);                   //从下标倒数第四个开始，到下标倒数第二个结束（不含），即20，30
     console.log(arr1);                            //现有元素不变，即10，20，30，40，50

选取简写方式：
1，一直选取到结尾：可省略第二个参数
2，如果选取的元素离结尾近：可用倒数下标：
   arr.slice(arr.length-n,arr.length-m+1),可简写为arr.slice(-n,-m+1);
3,复制数组：
  arr.slice(0,arr.length);可简写成arr.slice()；
  
修改数组：

删除：splice直接修改原数组
arr.splice(starti,n);        //删除arr中starti位置开始的n个元素不考虑含头不含尾
其实:var deletes=arr.splice(starti,n);
返回值deletes保存了被删除的元素组成的临时数组
 
var arr1=[10,20,30,40,50];
var arr2=arr1.splice(2,1);   //从下标2开始删除，删除1个元素，即删除30
 
插入：arr.splice(starti,0,值1，值2，...)
     在arr中starti位置，插入值1，值2，...原stari位置的值及其之后的值被向后顺移

替换：其实就是删除旧的，插入新的
      arr.splice(starti,n,值1，值2,...)
      先删除arr中starti位置的n个值，再在starti位置插入新值。
      
      强调：删除的元素个数和插入的新元素个数不必一致。
 
 颠倒数组：
 颠倒：reverse()颠倒数组中元素的顺序
 arr.reverse();
 var arr1=[10,20,30,40,50];
 arr1.reverse();
 console.log(arr1);                  
 
 排序：将元素按从小到大的顺序重新排列
 排序API:
 arr.sort():默认将所有元素转为字符串再排列
 问题：只能排列字符串类型的元素
 解决：使用自定义比较器函数
 




   


