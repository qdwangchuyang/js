1，严格区分大小写
2，let const 变量，常量

基本数据类型：number string boolean null undefined

             number:常规数字，NaN（not a number），
             NaN和任何值，包括自己，都不相等；
             isNaN,检测一个值是否为非有效数字，如果不是有效数字返回true,反之是有效数字返回false
                   在使用isNaN进行检测时候，首先会验证检测的值是否为数字类型；
                    先基于Number（）这个方法，把值转换为数字类型，然后再检测
                   
             Number（value）将字符串转换为数字，只要字符串中包含任意一个非有效数字字符，结果都是NaN，空字符串会变为数字零
             console.log(Number('12.5px'));      //NaN
             cconsol.log(Number(''));            // 0
             Number（）将布尔转换为数字
             console.log(number(false));        //0
             console.log(number(true));         //1
                
             null，undefined
             console.log(number(null));        //0
             console.log(number(undefined));         //NaN
                
             Number（）把引用数据类型转换为数字，是先把他基于toString方法转换为字符串，然后再转换为数字
             console.log(number({name:'10'}));       //NaN
             console.log(number({}));             //NaN
             console.log(number([]));             //0
             console.log(number([12]));           //12
             console.log(number([12,13]));                  // NaN
             
             parseInt/parseFloat([],[]); 把其他类型值转换为数字类型，与number有区别
             对于字符串来说，从左到右依次查找有效数字字符，直到遇到非有效数字字符，停止查找；
             不管后面是否还有数字，都不继续找了；将找到的当作数字返回
             
             字符串数据类型：所有用单引号，双引号，反引号包起来的都是字符串
             把其他类型值转换为字符串：1， [val].toString()
             let a=12;
             console.log(a.toString()); // '12'
             console.log((NaN).toString()); //'NaN'
             null和undefined是禁止直接toString的，会报错
             
             普通对象.toString()的结果是'[object object]'
             object.prototype.toString方法不是转换为字符串的，而是用来检测数据类型的
             
                                     2,字符串拼接//四则运算除了加法都是数学运算，加法有可能是字符串拼接
             console.log('10'+10); // '1010'，有字符串的加法
             console.log('10'-10); //  0
             console.log('10px'-10); //NaN
           
            例题：
            let a=10+null+true+[]+undefined+'珠峰'+null+[]+10+false;
             console.log(a); 
             // 10+null->10+0->10
                10+true->10+1->11
                11+[]->11+''->'11' 空数组变为数字，先要经历变成空字符串，遇到字符串，变成字符串拼接
                所以，剩下的运算都是字符串拼接，答案是'11undefined珠峰null10false'
             
            boolean布尔数据类型
            只有两个值 true false
            
            1.将其他类型值转换为布尔类型
            只有0，NaN,'',NULL,undefined五个值转换为false，其他都是true
            转换方法： -Boolean（[val]）
                      -！/！！
                      -条件判断        3种方式都可以
            
            ! ：取反，先转为布尔，然后取反
             console.log(!1);     //false
             !! :取反再取反，只相当于转为布尔，等价于boolean
             console.log(!!1);     //true
             
             如果条件只是一个值，不是 ==/===/！=/>=等这些比较，是要先把这个值先转化为布尔类型，然后验证真假
             if(1){
             console.log('haha');
             }                                //输出haha
             
             if('3px'+3){
             console.log('hehe');
             }                                //输出hehe  
             
              if('3px'-3){
             console.log('heihei');
             }                                //判断为NaN,FALSE，无法输出嘿嘿
             
             null/undefined
             都代表没有
             null意料之中，初期不知道数值，后期再赋值操作
             let num=null;let num=0;
             undefined意料之外
             let num; 创建一个变量没有赋值，默认值是undefined
             num=12；
             
             
             
             
             

引用数据类型：1，对象数据类型：普通对象{}，数组对象[]，正则对象/^[+-]?([1-9])/，Math数学函数对象，日期对象
             2， 函数数据类型
             
             
             object对象数据类型-普通对象
             {[key]:[value],...} 任何一个对象都是由零到多组键值对组成的，并且属性名不能重复
             获取属性名对应的属性值，对象.属性名
             let person={
             name:'123',
             age:40,
             weight:'80kg',
             height:'181cm',
             1：100
             };
             console.log(person.name);
             console.log(person['age']);             //属性名都是字符串，不过是默认的，所以没有加引号
             如果当前属性名不存在，默认的属性值是undefined
             console.log(person.sex);             // undefined
             如果当前属性名是数字，则不能使用点的方式获得属性值
             console.log(person.1)   //语法错误

            数据类型检测：
            
            typeof[val]:用来检测数据类型的运算符
                        基于typeof检测出来的结果：1，首先是一个字符串 2，字符串中包含对应的类型
                        局限性：1，typeof Null：object 但是null并不是对象
                                2，typeof 无法分辨出当前值是普通对象还是数组对象，所以只要是对象数据类型，返回结果都是object
            instanceof：用来检测当前实例是否属于某个类
            constructor：用于构造函数监测数据类型
            Object.prototype.toString.call():检测数据类型最好的方法
     

