1，本地存储
 把一些信息存储到客户端本地
 离线缓存，xxx.manifest,H5处理离线缓存还是存在一些问题，实际项目中通过传统的native app来实现完成
 localstorage/sessionstorage：H5中新增加的api，基于这个api可以把一些数据缓存到客户端本地
 indexedDB/webSQL:本地数据库存储
 cookie：本地信息存储（常用）
 cachestorage/applicationcache：本地缓存存储
 
 本地存储的应用场景：
 1，页面之间的信息通信
 
 有AB两个页面，A页面中有一个列表，点击列表中的每一项，转跳到B页面（详细页面），在B页面中需要知道点击的是A页面中的哪条数据，
 从而展示不同的信息。
 URL问号传参，：‘b.html?xxx=xxx’(进入到B页面，首先把传递的参数获取到，根据传递的不同，我们从服务器获取不同的数据，
 从此展示不同的内容）
 前提条件：需要是A中的某个操作可以跳转到B页面，此时才可以问号传参；
          本地存储都是存储到当前浏览器指定的地方，存储信息按照域来管理；其他域网站中无法直接获取，本地存储无法直接跨域
 登录/注册：真实项目中的登录注册，是基于session服务器存储的登陆信息，而不是本地存储（因为本地存储明文存储，可以在控制台中查看）
           可以基于AJAX的post向服务器发送请求
           1，获取传递的用户名和密码
           2，到数据库中查找用户名和对应密码是否正确；
           如果正确，登陆成功，服务器会将用户基本信息在服务器中基于session存储起来（服务器存储）
           
 session和cookie的关联：
           1，session是服务器存储，cookie是客户端存储
           2，在服务器端建立session之后，服务器和当前客户端之间会建立唯一标识（sessionID/sid），而本次存储的session
           信息都存放到对应的sid下
           3，当服务器端把一些成功或者失败的信息返回给客户端的时候，在响应头信息中会增加cookie（客户端）这样的字段，
           把sid
           3，返回是否成功
           用到本地存储的地方：
           A存储信息，B页面中可以获取
           登录，
           记住用户名和密码
           跳转到其他页面
           返回上级页面的时候停留在之前最后一次点击的位置
 
 2，性能优化
