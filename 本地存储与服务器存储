1，本地存储
 把一些信息存储到客户端本地
 离线缓存，xxx.manifest,H5处理离线缓存还是存在一些问题，实际项目中通过传统的native app来实现完成
 localstorage/sessionstorage：H5中新增加的api，基于这个api可以把一些数据缓存到客户端本地
 indexedDB/webSQL:本地数据库存储
 cookie：本地信息存储（常用）
 cachestorage/applicationcache：本地缓存存储
 
 本地存储的应用场景：
 1，页面之间的信息通信
 
 有AB两个页面，A页面中有一个列表，点击列表中的每一项，转跳到B页面（详细页面），在B页面中需要知道点击的是A页面中的哪条数据，
 从而展示不同的信息。
 URL问号传参，：‘b.html?xxx=xxx’(进入到B页面，首先把传递的参数获取到，根据传递的不同，我们从服务器获取不同的数据，
 从此展示不同的内容）
 前提条件：需要是A中的某个操作可以跳转到B页面，此时才可以问号传参；
          本地存储都是存储到当前浏览器指定的地方，存储信息按照域来管理；其他域网站中无法直接获取，本地存储无法直接跨域
 登录/注册：真实项目中的登录注册，是基于session服务器存储的登陆信息，而不是本地存储（因为本地存储明文存储，可以在控制台中查看）
           可以基于AJAX的post向服务器发送请求(密码需要加密）
           1，获取传递的用户名和密码
           2，到数据库中查找用户名和对应密码是否正确；
           如果正确，登陆成功，服务器会将用户基本信息在服务器中基于session存储起来（服务器存储）
           isLogin:true
           3,把成功或者失败的信息返回给客户端
           
 session和cookie的关联：
           1，session是服务器存储，cookie是客户端存储
           2，在服务器端建立session之后，服务器和当前客户端之间会建立唯一标识（sessionID/sid），
           而本次存储的session信息都存放到对应的sid下。
           （目的是为了区分不同客户端都在服务器上建立session信息，后期查找的时候，可以找到最初建立的）
           3， 当服务器端把一些成功或者失败的信息返回给客户端的时候，在响应头信息中会增加set-cookie：connect.sid=（客户端）这样的字段，
           把sid存储到客户端的cookie信息中
           3，返回是否成功
           用到本地存储的地方：
           A存储信息，B页面中可以获取
           登录，
           记住用户名和密码
           跳转到其他页面
           返回上级页面的时候停留在之前最后一次点击的位置
 
 2，性能优化
       把一些不经常改变的数据，在第一次从服务器端获取到之后，存储到客户端本地（记录一个存储时间），假设我们设置有效存储期10分钟，
       那么10分钟后，我们再刷新页面，就不用再向服务器发送请求，直接从本地数据中心获取展示即可；超过10分钟后，重新向服务器发送请求，
       请求回的数据参考第一次，存储到本地中。
       优点：1，减轻服务器压力 2，对于不经常更新的数据我们可以把存储周期设置的长一些，有助于页面第二次加载的时候，渲染速度更快
       
 localStorage  vs  cookie
 
 cookie 
 1，兼容所有的浏览器 
 2，有存储大小限制，一般一个域下，只能存储2kb
 3，cookie有过期时间（可以自己设置）
 4，杀毒软件或者浏览器的垃圾清理都可以把cookie信息强制清除
 5，隐私或者无痕浏览模式下，不记录cookie
 6，cookie不是严格的本地存储，因为要和服务器来回传输
 
 localStorage
 1，不兼容IE8及以下
 2，有存储大小限制，一般一个域下，只能存储5MB
 3，本地永久存储，只要不手动删除。删除方式：基于API removeItem/clear手动清除
 4，在隐私或者无痕浏览模式下，是记录localStorage的
 5，localStorage和服务器存储无关
 
   真实项目中使用本地存储来完成一些需求的情况不多，一般都是基于服务器session或者数据库存储完成的（服务器session和本地cookie有关联），
   如果不考虑兼容，就想基于本地存储来完成一些事情，那么一般都是用localStorage
   
   localStorage.setItem([key],[value]):[value]必须是字符串格式的（即使写的不是字符串，也会默认转换为字符串）
   localStorage.getItem([key]):通过属性名获取存储的信息
   localStorage.removeItem([key]):删除指定的存储信息
   localStorage.clear():清除当前域下存储的所有信息
   localStorage.key(0):基于索引获取指定的KEY名
   
   document.cookie='';//设置cookie
   
   
   
   
   
   
 
 
 
 
 
 
 
 
 
 
